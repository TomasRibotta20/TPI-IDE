@page "/alumno/mis-cursos"
@using AcademiaBlazor.Services
@using DTOs
@inject InscripcionService InscripcionService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Mis Cursos - Alumno</PageTitle>

<div class="page-container">
    <!-- Header -->
    <div class="page-header">
        <div class="header-content">
            <button class="btn-back" @onclick="GoBack">
                Volver al Dashboard
            </button>
            <h1>Mis Cursos e Inscripciones</h1>
            <button class="btn-primary" @onclick="LoadData">
                Actualizar
            </button>
        </div>
    </div>

    <!-- Content -->
    <div class="page-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>Cargando inscripciones...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="empty-state">
                <div class="empty-icon">!</div>
                <h2>Error al cargar</h2>
                <p>@errorMessage</p>
                <button class="btn-primary" @onclick="LoadData">
                    Reintentar
                </button>
            </div>
        }
        else if (!inscripciones.Any())
        {
            <div class="empty-state">
                <div class="empty-icon">MC</div>
                <h2>No tienes inscripciones</h2>
                <p>Ve a "Inscribirme a Cursos" para comenzar</p>
                <button class="btn-primary" @onclick="GoToInscripcion">
                    + Inscribirme a un Curso
                </button>
            </div>
        }
        else
        {
            <!-- Estadisticas -->
            <div class="stats-container">
                <div class="stat-card stat-total">
                    <div class="stat-icon">T</div>
                    <div class="stat-info">
                        <h3>@inscripciones.Count()</h3>
                        <p>Cursos Totales</p>
                    </div>
                </div>
                <div class="stat-card stat-promocional">
                    <div class="stat-icon">P</div>
                    <div class="stat-info">
                        <h3>@inscripciones.Count(i => i.Condicion == CondicionAlumnoDto.Promocional)</h3>
                        <p>Promocionales</p>
                    </div>
                </div>
                <div class="stat-card stat-regular">
                    <div class="stat-icon">R</div>
                    <div class="stat-info">
                        <h3>@inscripciones.Count(i => i.Condicion == CondicionAlumnoDto.Regular)</h3>
                        <p>Regulares</p>
                    </div>
                </div>
                <div class="stat-card stat-libre">
                    <div class="stat-icon">L</div>
                    <div class="stat-info">
                        <h3>@inscripciones.Count(i => i.Condicion == CondicionAlumnoDto.Libre)</h3>
                        <p>Libres</p>
                    </div>
                </div>
            </div>

            <!-- Tabla de Inscripciones -->
            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Curso</th>
                            <th>Materia</th>
                            <th>Comision</th>
                            <th>AÃ±o</th>
                            <th>Condicion</th>
                            <th>Nota</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var inscripcion in inscripciones.OrderBy(i => i.DescripcionCurso))
                        {
                            <tr class="@GetCondicionRowClass(inscripcion.Condicion)">
                                <td><strong>@inscripcion.DescripcionCurso</strong></td>
                                <td>@inscripcion.NombreMateria</td>
                                <td>@inscripcion.DescComision</td>
                                <td>@inscripcion.AnioCalendario</td>
                                <td>
                                    <span class="badge @GetCondicionBadgeClass(inscripcion.Condicion)">
                                        @inscripcion.Condicion
                                    </span>
                                </td>
                                <td>
                                    @if (inscripcion.Condicion == CondicionAlumnoDto.Promocional && inscripcion.Nota.HasValue)
                                    {
                                        <span class="nota-badge @GetNotaBadgeClass(inscripcion.Nota.Value)">
                                            @inscripcion.Nota.Value
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="nota-badge nota-sin-calificar">-</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Resumen por Condicion -->
            <div class="summary-section">
                <h2>Resumen Academico</h2>
                <div class="summary-cards">
                    @if (inscripciones.Count(i => i.Condicion == CondicionAlumnoDto.Promocional) > 0)
                    {
                        <div class="summary-card card-promocional">
                            <h3>Promocionales (@inscripciones.Count(i => i.Condicion == CondicionAlumnoDto.Promocional))</h3>
                            <ul>
                                @foreach (var inscripcion in inscripciones.Where(i => i.Condicion == CondicionAlumnoDto.Promocional))
                                {
                                    <li>@inscripcion.NombreMateria @(inscripcion.Nota.HasValue ? $"- Nota: {inscripcion.Nota}" : "")</li>
                                }
                            </ul>
                        </div>
                    }

                    @if (inscripciones.Count(i => i.Condicion == CondicionAlumnoDto.Regular) > 0)
                    {
                        <div class="summary-card card-regular">
                            <h3>Regulares (@inscripciones.Count(i => i.Condicion == CondicionAlumnoDto.Regular))</h3>
                            <ul>
                                @foreach (var inscripcion in inscripciones.Where(i => i.Condicion == CondicionAlumnoDto.Regular))
                                {
                                    <li>@inscripcion.NombreMateria</li>
                                }
                            </ul>
                        </div>
                    }

                    @if (inscripciones.Count(i => i.Condicion == CondicionAlumnoDto.Libre) > 0)
                    {
                        <div class="summary-card card-libre">
                            <h3>Libres (@inscripciones.Count(i => i.Condicion == CondicionAlumnoDto.Libre))</h3>
                            <ul>
                                @foreach (var inscripcion in inscripciones.Where(i => i.Condicion == CondicionAlumnoDto.Libre))
                                {
                                    <li>@inscripcion.NombreMateria</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<style>
    .page-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }

    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px 0;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .header-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 40px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .page-header h1 {
        margin: 0;
        font-size: 32px;
        font-weight: bold;
        flex: 1;
        text-align: center;
    }

    .btn-back {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 2px solid white;
        padding: 10px 20px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-back:hover {
        background: white;
        color: #667eea;
        transform: translateX(-5px);
    }

    .btn-primary {
        background: white;
        color: #667eea;
        border: none;
        padding: 12px 24px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }

    .page-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 40px;
    }

    .loading-container {
        text-align: center;
        padding: 60px 20px;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .empty-state {
        background: white;
        border-radius: 15px;
        padding: 60px;
        text-align: center;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    .empty-icon {
        font-size: 80px;
        margin-bottom: 20px;
    }

    .empty-state h2 {
        color: #495057;
        margin-bottom: 10px;
    }

    .empty-state p {
        color: #6c757d;
        margin-bottom: 30px;
    }

    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        display: flex;
        align-items: center;
        gap: 20px;
        transition: all 0.3s;
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    }

    .stat-total { border-left: 5px solid #667eea; }
    .stat-promocional { border-left: 5px solid #2ecc71; }
    .stat-regular { border-left: 5px solid #3498db; }
    .stat-libre { border-left: 5px solid #e74c3c; }

    .stat-icon {
        font-size: 48px;
        opacity: 0.8;
    }

    .stat-info h3 {
        margin: 0 0 5px 0;
        font-size: 32px;
        color: #667eea;
        font-weight: bold;
    }

    .stat-info p {
        margin: 0;
        color: #6c757d;
        font-size: 14px;
    }

    .table-container {
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        overflow-x: auto;
        margin-bottom: 30px;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        min-width: 900px;
    }

    .data-table thead {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .data-table th {
        padding: 20px 15px;
        text-align: left;
        font-weight: 600;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .data-table td {
        padding: 15px;
        border-bottom: 1px solid #e9ecef;
        font-size: 14px;
    }

    .data-table tbody tr {
        transition: all 0.3s;
    }

    .data-table tbody tr:hover {
        background: #f8f9fa;
    }

    .condicion-promocional {
        background-color: rgba(46, 204, 113, 0.1);
    }

    .condicion-regular {
        background-color: rgba(52, 152, 219, 0.1);
    }

    .condicion-libre {
        background-color: rgba(231, 76, 60, 0.1);
    }

    .badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        display: inline-block;
    }

    .badge-promocional {
        background: #2ecc71;
        color: white;
    }

    .badge-regular {
        background: #3498db;
        color: white;
    }

    .badge-libre {
        background: #e74c3c;
        color: white;
    }

    .nota-badge {
        padding: 4px 10px;
        border-radius: 15px;
        font-weight: bold;
        font-size: 13px;
        display: inline-block;
        min-width: 40px;
        text-align: center;
    }

    .nota-excelente {
        background: #27ae60;
        color: white;
    }

    .nota-muy-buena {
        background: #2ecc71;
        color: white;
    }

    .nota-buena {
        background: #3498db;
        color: white;
    }

    .nota-regular {
        background: #f39c12;
        color: white;
    }

    .nota-insuficiente {
        background: #e74c3c;
        color: white;
    }

    .nota-sin-calificar {
        background: #95a5a6;
        color: white;
    }

    .summary-section {
        background: white;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    .summary-section h2 {
        margin: 0 0 20px 0;
        color: #495057;
        font-size: 24px;
    }

    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }

    .summary-card {
        padding: 20px;
        border-radius: 10px;
        border-left: 5px solid;
    }

    .card-promocional {
        background: rgba(46, 204, 113, 0.1);
        border-color: #2ecc71;
    }

    .card-regular {
        background: rgba(52, 152, 219, 0.1);
        border-color: #3498db;
    }

    .card-libre {
        background: rgba(231, 76, 60, 0.1);
        border-color: #e74c3c;
    }

    .summary-card h3 {
        margin: 0 0 15px 0;
        font-size: 18px;
        color: #495057;
    }

    .summary-card ul {
        margin: 0;
        padding-left: 20px;
        color: #6c757d;
    }

    .summary-card li {
        margin-bottom: 8px;
    }

    .icon {
        font-style: normal;
    }

    @@media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 15px;
        }

        .page-header h1 {
            font-size: 24px;
        }

        .page-content {
            padding: 20px;
        }

        .stats-container {
            grid-template-columns: 1fr;
        }

        .summary-cards {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private List<AlumnoCursoDto> inscripciones = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private int? personaId;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var user = await AuthService.GetCurrentUserAsync();
        if (user?.TipoUsuario != "Alumno")
        {
            Navigation.NavigateTo("/dashboard");
            return;
        }

        personaId = user.PersonaId;
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            if (personaId.HasValue)
            {
                var result = await InscripcionService.GetByAlumnoAsync(personaId.Value);
                inscripciones = result.ToList();
            }
            else
            {
                errorMessage = "No se pudo obtener tu informacion de usuario";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar inscripciones: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetCondicionRowClass(CondicionAlumnoDto condicion)
    {
        return condicion switch
        {
            CondicionAlumnoDto.Promocional => "condicion-promocional",
            CondicionAlumnoDto.Regular => "condicion-regular",
            CondicionAlumnoDto.Libre => "condicion-libre",
            _ => ""
        };
    }

    private string GetCondicionBadgeClass(CondicionAlumnoDto condicion)
    {
        return condicion switch
        {
            CondicionAlumnoDto.Promocional => "badge-promocional",
            CondicionAlumnoDto.Regular => "badge-regular",
            CondicionAlumnoDto.Libre => "badge-libre",
            _ => ""
        };
    }

    private string GetNotaBadgeClass(int nota)
    {
        return nota switch
        {
            >= 9 => "nota-excelente",
            >= 8 => "nota-muy-buena",
            >= 7 => "nota-buena",
            >= 6 => "nota-regular",
            _ => "nota-insuficiente"
        };
    }

    private void GoToInscripcion()
    {
        Navigation.NavigateTo("/alumno/inscripcion");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/alumno/dashboard");
    }
}
