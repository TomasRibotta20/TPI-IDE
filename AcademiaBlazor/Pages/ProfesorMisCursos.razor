@page "/profesor/mis-cursos"
@using AcademiaBlazor.Services
@using DTOs
@inject DocenteCursoService DocenteCursoService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Mis Cursos - Profesor</PageTitle>

<div class="page-container">
    <!-- Header -->
    <div class="page-header">
        <div class="header-content">
            <button class="btn-back" @onclick="GoBack">
                Volver al Dashboard
            </button>
            <h1>Mis Cursos Asignados</h1>
            <button class="btn-primary" @onclick="LoadData">
                Actualizar
            </button>
        </div>
    </div>

    <!-- Content -->
    <div class="page-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>Cargando cursos...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="empty-state">
                <div class="empty-icon">!</div>
                <h2>Error al cargar</h2>
                <p>@errorMessage</p>
                <button class="btn-primary" @onclick="LoadData">
                    Reintentar
                </button>
            </div>
        }
        else if (!cursos.Any())
        {
            <div class="empty-state">
                <div class="empty-icon">MC</div>
                <h2>No tienes cursos asignados</h2>
                <p>Un administrador debe asignarte cursos desde el menú de gestión</p>
            </div>
        }
        else
        {
            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Materia</th>
                            <th>Comisión</th>
                            <th>Año</th>
                            <th>Cargo</th>
                            <th>Descripción</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var curso in cursos)
                        {
                            <tr class="@GetCargoClass(curso.Cargo)">
                                <td><strong>@curso.NombreMateria</strong></td>
                                <td>@curso.DescComision</td>
                                <td>@curso.AnioCalendario</td>
                                <td><span class="badge @GetCargoBadgeClass(curso.Cargo)">@curso.CargoDescripcion</span></td>
                                <td>@curso.DescripcionCurso</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="stats-container">
                <div class="stat-card">
                    <div class="stat-icon">TO</div>
                    <div class="stat-info">
                        <h3>@cursos.Count()</h3>
                        <p>Cursos Asignados</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">JC</div>
                    <div class="stat-info">
                        <h3>@cursos.Count(c => c.Cargo == TipoCargoDto.JefeDeCatedra)</h3>
                        <p>Como Jefe de Cátedra</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">TI</div>
                    <div class="stat-info">
                        <h3>@cursos.Count(c => c.Cargo == TipoCargoDto.Titular)</h3>
                        <p>Como Titular</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">AU</div>
                    <div class="stat-info">
                        <h3>@cursos.Count(c => c.Cargo == TipoCargoDto.Auxiliar)</h3>
                        <p>Como Auxiliar</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .page-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }

    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px 0;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .header-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 40px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .page-header h1 {
        margin: 0;
        font-size: 32px;
        font-weight: bold;
        flex: 1;
        text-align: center;
    }

    .btn-back {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 2px solid white;
        padding: 10px 20px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-back:hover {
        background: white;
        color: #667eea;
        transform: translateX(-5px);
    }

    .btn-primary {
        background: white;
        color: #667eea;
        border: none;
        padding: 12px 24px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }

    .page-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 40px;
    }

    .loading-container {
        text-align: center;
        padding: 60px 20px;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .empty-state {
        background: white;
        border-radius: 15px;
        padding: 60px;
        text-align: center;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    .empty-icon {
        font-size: 80px;
        margin-bottom: 20px;
    }

    .empty-state h2 {
        color: #495057;
        margin-bottom: 10px;
    }

    .empty-state p {
        color: #6c757d;
        margin-bottom: 30px;
    }

    .table-container {
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        overflow-x: auto;
        margin-bottom: 30px;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        min-width: 900px;
    }

    .data-table thead {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .data-table th {
        padding: 20px 15px;
        text-align: left;
        font-weight: 600;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .data-table td {
        padding: 15px;
        border-bottom: 1px solid #e9ecef;
        font-size: 14px;
    }

    .data-table tbody tr {
        transition: all 0.3s;
    }

    .data-table tbody tr:hover {
        background: #f8f9fa;
        transform: scale(1.01);
    }

    .cargo-jefe {
        background-color: rgba(52, 152, 219, 0.1);
    }

    .cargo-titular {
        background-color: rgba(46, 204, 113, 0.1);
    }

    .cargo-auxiliar {
        background-color: rgba(241, 196, 15, 0.1);
    }

    .badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        display: inline-block;
    }

    .badge-jefe {
        background: #3498db;
        color: white;
    }

    .badge-titular {
        background: #2ecc71;
        color: white;
    }

    .badge-auxiliar {
        background: #f1c40f;
        color: #333;
    }

    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 30px;
    }

    .stat-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        display: flex;
        align-items: center;
        gap: 20px;
        transition: all 0.3s;
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    }

    .stat-icon {
        font-size: 32px;
        font-weight: bold;
        opacity: 0.8;
        color: #667eea;
        background: #f0f0ff;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        letter-spacing: 1px;
    }

    .stat-info h3 {
        margin: 0 0 5px 0;
        font-size: 32px;
        color: #667eea;
        font-weight: bold;
    }

    .stat-info p {
        margin: 0;
        color: #6c757d;
        font-size: 14px;
    }

    .icon {
        font-style: normal;
    }

    @@media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 15px;
        }

        .page-header h1 {
            font-size: 24px;
        }

        .page-content {
            padding: 20px;
        }

        .stats-container {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private List<DocenteCursoDto> cursos = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private int? personaId;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var user = await AuthService.GetCurrentUserAsync();
        if (user?.TipoUsuario != "Profesor")
        {
            Navigation.NavigateTo("/dashboard");
            return;
        }

        personaId = user.PersonaId;
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            if (personaId.HasValue)
            {
                var result = await DocenteCursoService.GetByDocenteAsync(personaId.Value);
                cursos = result.ToList();
            }
            else
            {
                errorMessage = "No se pudo obtener tu información de usuario";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar cursos: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetCargoClass(TipoCargoDto cargo)
    {
        return cargo switch
        {
            TipoCargoDto.JefeDeCatedra => "cargo-jefe",
            TipoCargoDto.Titular => "cargo-titular",
            TipoCargoDto.Auxiliar => "cargo-auxiliar",
            _ => ""
        };
    }

    private string GetCargoBadgeClass(TipoCargoDto cargo)
    {
        return cargo switch
        {
            TipoCargoDto.JefeDeCatedra => "badge-jefe",
            TipoCargoDto.Titular => "badge-titular",
            TipoCargoDto.Auxiliar => "badge-auxiliar",
            _ => ""
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/profesor/dashboard");
    }
}
