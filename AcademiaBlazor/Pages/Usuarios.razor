@page "/usuarios"
@using AcademiaBlazor.Services
@using DTOs
@inject UsuarioService UsuarioService
@inject PlanService PlanService
@inject NavigationManager Navigation
@inject AuthenticationService AuthService

<PageTitle>Usuarios - Academia</PageTitle>

<div class="page-container">
    <div class="page-header">
        <div class="header-content">
            <button class="btn-back" @onclick="GoBack">
                Volver al Dashboard
            </button>
            <h1>Gestión de Usuarios</h1>
            <button class="btn-primary" @onclick="OpenCreateDialog">
                + Nuevo Usuario
            </button>
        </div>
    </div>

    <div class="page-content">
        <div class="filter-container">
            <label>Filtrar por tipo:</label>
            <select class="filter-select" @onchange="OnTipoFilterChange">
                <option value="">Todos</option>
                <option value="Administrador">Administradores</option>
                <option value="Profesor">Profesores</option>
                <option value="Alumno">Alumnos</option>
            </select>
        </div>

        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>Cargando usuarios...</p>
            </div>
        }
        else if (!usuariosFiltrados.Any())
        {
            <div class="empty-state">
                <div class="empty-icon">US</div>
                <h2>No hay usuarios @(filtroTipo == "" ? "registrados" : $"de tipo {filtroTipo}")</h2>
                <p>Comienza creando el primer usuario</p>
                <button class="btn-primary" @onclick="OpenCreateDialog">
                    <span class="icon">+</span> Crear Primer Usuario
                </button>
            </div>
        }
        else
        {
            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Tipo</th>
                            <th>Usuario</th>
                            <th>Nombre Completo</th>
                            <th>Email</th>
                            <th>Legajo</th>
                            <th>Habilitado</th>
                            <th class="actions-column">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var usuario in usuariosFiltrados)
                        {
                            <tr>
                                <td>@usuario.Id</td>
                                <td>
                                    <span class="badge badge-@GetTipoBadgeClass(usuario.TipoUsuario)">
                                        @usuario.TipoUsuario
                                    </span>
                                </td>
                                <td><strong>@usuario.UsuarioNombre</strong></td>
                                <td>@usuario.Apellido, @usuario.Nombre</td>
                                <td>@usuario.Email</td>
                                <td>@(usuario.Legajo?.ToString() ?? "-")</td>
                                <td>
                                    <span class="badge @(usuario.Habilitado ? "badge-success" : "badge-danger")">
                                        @(usuario.Habilitado ? "Sí" : "No")
                                    </span>
                                </td>
                                <td class="actions-column">
                                    <button class="btn-action btn-edit" @onclick="() => OpenEditDialog(usuario)" title="Editar">
                                        Editar
                                    </button>
                                    <button class="btn-action btn-delete" @onclick="() => DeleteUsuario(usuario)" title="Eliminar">
                                        Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@if (showDialog)
{
    <div class="modal-overlay" @onclick="CloseDialog">
        <div class="modal-content modal-large" @onclick:stopPropagation>
            <div class="modal-header">
                <h2>@(isEditMode ? "Editar Usuario" : "Nuevo Usuario")</h2>
                <button class="btn-close" @onclick="CloseDialog">×</button>
            </div>
            
            <div class="modal-body">
                <EditForm Model="@currentUsuario" OnValidSubmit="HandleSave">
                    <div class="form-group">
                        <label for="tipo">Tipo de Usuario *</label>
                        <select id="tipo" class="form-control" value="@currentUsuario.TipoUsuario" @onchange="OnTipoUsuarioChange" disabled="@isEditMode">
                            <option value="Administrador">Administrador</option>
                            <option value="Profesor">Profesor</option>
                            <option value="Alumno">Alumno</option>
                        </select>
                        <small class="form-hint">Los Administradores tienen acceso total. Profesores y Alumnos requieren datos adicionales.</small>
                    </div>

                    <div class="divider"></div>

                    <h3 class="section-title">Datos de Acceso</h3>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="usuario">Usuario *</label>
                            <InputText id="usuario" class="form-control" @bind-Value="currentUsuario.UsuarioNombre" placeholder="Ingrese nombre de usuario" disabled="@isEditMode" />
                        </div>

                        <div class="form-group">
                            <label for="email">Email *</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="currentUsuario.Email" placeholder="correo@ejemplo.com" />
                        </div>
                    </div>

                    @if (!isEditMode)
                    {
                        <div class="form-group">
                            <label for="password">Contraseña *</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="currentUsuario.Contrasenia" placeholder="Minimo 6 caracteres" />
                        </div>
                    }

                    <div class="form-group">
                        <label class="checkbox-label">
                            <InputCheckbox @bind-Value="currentUsuario.Habilitado" />
                            <span>Usuario habilitado</span>
                        </label>
                    </div>

                    @if (currentUsuario.TipoUsuario != "Administrador")
                    {
                        <div class="divider"></div>
                        <h3 class="section-title">Datos Personales</h3>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="nombre">Nombre *</label>
                                <InputText id="nombre" class="form-control" @bind-Value="nombrePersona" placeholder="Nombre" />
                            </div>

                            <div class="form-group">
                                <label for="apellido">Apellido *</label>
                                <InputText id="apellido" class="form-control" @bind-Value="apellidoPersona" placeholder="Apellido" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="direccion">Direccion</label>
                                <InputText id="direccion" class="form-control" @bind-Value="currentUsuario.Direccion" placeholder="Calle, numero, ciudad" />
                            </div>

                            <div class="form-group">
                                <label for="telefono">Telefono</label>
                                <input id="telefono" type="tel" class="form-control" value="@currentUsuario.Telefono" @oninput="ValidarTelefono" placeholder="+54 9 11 1234-5678" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="fechaNac">Fecha de Nacimiento *</label>
                                <InputDate id="fechaNac" class="form-control" @bind-Value="currentUsuario.FechaNacimiento" />
                            </div>

                            <div class="form-group">
                                <label for="plan">Plan de Estudio</label>
                                <select id="plan" class="form-control" @bind="currentUsuario.IdPlan">
                                    <option value="">Sin asignar</option>
                                    @foreach (var plan in planes)
                                    {
                                        <option value="@plan.Id">@plan.Descripcion - @plan.DescripcionEspecialidad</option>
                                    }
                                </select>
                                <small class="form-hint">El plan puede asignarse despues si es necesario</small>
                            </div>
                        </div>

                        @if (isEditMode)
                        {
                            <div class="info-box">
                                <strong>Legajo:</strong> @(currentUsuario.Legajo?.ToString() ?? "Se generara automaticamente")
                            </div>
                        }
                        else
                        {
                            <div class="info-box">
                                <strong>Nota:</strong> El legajo se generara automaticamente al crear el usuario.
                            </div>
                        }
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" @onclick="CloseDialog">
                            Cancelar
                        </button>
                        <button type="submit" class="btn-primary" disabled="@isSaving">
                            @(isSaving ? "Guardando..." : "Guardar")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (showConfirmDialog)
{
    <div class="modal-overlay" @onclick="CloseConfirmDialog">
        <div class="modal-content confirm-modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h2>Confirmar Eliminacion</h2>
            </div>
            
            <div class="modal-body">
                <p>Esta seguro que desea eliminar el usuario <strong>"@usuarioToDelete?.UsuarioNombre"</strong>?</p>
                @if (usuarioToDelete?.TipoUsuario != "Administrador")
                {
                    <p class="warning-text">Esto tambien eliminara los datos de persona asociados.</p>
                }
                <p class="warning-text">Esta acción no se puede deshacer.</p>

                <div class="modal-actions">
                    <button class="btn-secondary" @onclick="CloseConfirmDialog">
                        Cancelar
                    </button>
                    <button class="btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                        @(isDeleting ? "Eliminando..." : "Eliminar")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* Estilos existentes... */
    .page-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }

    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px 0;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .header-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 40px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .page-header h1 {
        margin: 0;
        font-size: 32px;
        font-weight: bold;
        flex: 1;
        text-align: center;
    }

    .btn-back {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 2px solid white;
        padding: 10px 20px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-back:hover {
        background: white;
        color: #667eea;
        transform: translateX(-5px);
    }

    .btn-primary {
        background: white;
        color: #667eea;
        border: none;
        padding: 12px 24px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }

    .btn-primary:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .page-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 40px;
    }

    /* Filtro */
    .filter-container {
        background: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-select {
        padding: 10px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        min-width: 200px;
    }

    .filter-select:focus {
        outline: none;
        border-color: #667eea;
    }

    .loading-container {
        text-align: center;
        padding: 60px 20px;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .empty-state {
        background: white;
        border-radius: 15px;
        padding: 60px;
        text-align: center;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    .empty-icon {
        font-size: 80px;
        margin-bottom: 20px;
        font-weight: bold;
        color: #667eea;
    }

    .empty-state h2 {
        color: #495057;
        margin-bottom: 10px;
    }

    .empty-state p {
        color: #6c757d;
        margin-bottom: 30px;
    }

    .table-container {
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
    }

    .data-table thead {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .data-table th {
        padding: 20px;
        text-align: left;
        font-weight: 600;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .data-table td {
        padding: 20px;
        border-bottom: 1px solid #e9ecef;
    }

    .data-table tbody tr {
        transition: all 0.3s;
    }

    .data-table tbody tr:hover {
        background: #f8f9fa;
        transform: scale(1.01);
    }

    .actions-column {
        text-align: center;
        width: 200px;
    }

    .btn-action {
        background: #667eea;
        color: white;
        border: none;
        font-size: 12px;
        cursor: pointer;
        padding: 8px 12px;
        margin: 0 5px;
        border-radius: 8px;
        transition: all 0.3s;
        font-weight: 600;
    }

    .btn-edit:hover {
        background: #5568d3;
        transform: scale(1.05);
    }

    .btn-delete {
        background: #dc3545;
    }

    .btn-delete:hover {
        background: #c82333;
        transform: scale(1.05);
    }

    .badge {
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
    }

    .badge-success {
        background: #d4edda;
        color: #155724;
    }

    .badge-danger {
        background: #f8d7da;
        color: #721c24;
    }

    .badge-admin {
        background: #fff3cd;
        color: #856404;
    }

    .badge-profesor {
        background: #d1ecf1;
        color: #0c5460;
    }

    .badge-alumno {
        background: #d4edda;
        color: #155724;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        animation: fadeIn 0.3s;
        overflow-y: auto;
        padding: 20px;
    }

    .modal-content {
        background: white;
        border-radius: 15px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        width: 90%;
        max-width: 500px;
        animation: slideUp 0.3s;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-large {
        max-width: 800px;
    }

    .confirm-modal {
        max-width: 400px;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(50px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    .modal-header {
        padding: 25px 30px;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: sticky;
        top: 0;
        background: white;
        z-index: 10;
    }

    .modal-header h2 {
        margin: 0;
        font-size: 24px;
        color: #495057;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 28px;
        color: #6c757d;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.3s;
    }

    .btn-close:hover {
        background: #f8f9fa;
        color: #495057;
    }

    .modal-body {
        padding: 30px;
    }

    .section-title {
        color: #667eea;
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 20px;
        margin-top: 10px;
    }

    .divider {
        height: 1px;
        background: #e9ecef;
        margin: 30px 0;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    @@media (max-width: 768px) {
        .form-row {
            grid-template-columns: 1fr;
        }
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        color: #495057;
        font-weight: 600;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-hint {
        display: block;
        color: #6c757d;
        font-size: 12px;
        margin-top: 5px;
        font-style: italic;
    }

    .form-control, select.form-control {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        font-size: 14px;
        transition: all 0.3s;
        box-sizing: border-box;
    }

    .form-control:focus, select.form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        gap: 10px;
        cursor: pointer;
        font-weight: 600;
        color: #495057;
    }

    .checkbox-label input[type="checkbox"] {
        width: 20px;
        height: 20px;
        cursor: pointer;
    }

    .info-box {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 20px 0;
    }

    .modal-actions {
        display: flex;
        gap: 15px;
        justify-content: flex-end;
        margin-top: 25px;
        padding-top: 20px;
        border-top: 1px solid #e9ecef;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-secondary:hover {
        background: #5a6268;
        transform: translateY(-2px);
    }

    .btn-danger {
        background: #dc3545;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-danger:hover:not(:disabled) {
        background: #c82333;
        transform: translateY(-2px);
    }

    .btn-danger:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .alert {
        padding: 12px 15px;
        border-radius: 10px;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .warning-text {
        color: #dc3545;
        font-weight: 600;
        margin-top: 10px;
    }

    .icon {
        font-style: normal;
    }
</style>

@code {
    private List<UsuarioDto> usuarios = new();
    private List<UsuarioDto> usuariosFiltrados = new();
    private List<PlanDto> planes = new();
    private UsuarioDto currentUsuario = new();
    private UsuarioDto? usuarioToDelete;
    
    // Campos auxiliares para Nombre y Apellido 
    private string nombrePersona = string.Empty;
    private string apellidoPersona = string.Empty;
    
    private bool isLoading = true;
    private bool showDialog = false;
    private bool showConfirmDialog = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private bool isDeleting = false;
    private string errorMessage = string.Empty;
    private string filtroTipo = "";

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var usuariosTask = UsuarioService.GetAllAsync();
            var planesTask = PlanService.GetAllAsync();
            
            await Task.WhenAll(usuariosTask, planesTask);
            
            usuarios = (await usuariosTask).ToList();
            planes = (await planesTask).ToList();
            
            AplicarFiltro();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar datos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnTipoFilterChange(ChangeEventArgs e)
    {
        filtroTipo = e.Value?.ToString() ?? "";
        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        if (string.IsNullOrEmpty(filtroTipo))
        {
            usuariosFiltrados = usuarios.ToList();
        }
        else
        {
            usuariosFiltrados = usuarios.Where(u => u.TipoUsuario == filtroTipo).ToList();
        }
    }

    private void OpenCreateDialog()
    {
        isEditMode = false;
        currentUsuario = new UsuarioDto 
        { 
            Habilitado = true,
            TipoUsuario = "Administrador",
            FechaNacimiento = DateTime.Now.AddYears(-18)
        };
        nombrePersona = string.Empty;
        apellidoPersona = string.Empty;
        errorMessage = string.Empty;
        showDialog = true;
    }

    private void OpenEditDialog(UsuarioDto usuario)
    {
        isEditMode = true;
        currentUsuario = new UsuarioDto
        {
            Id = usuario.Id,
            UsuarioNombre = usuario.UsuarioNombre,
            Email = usuario.Email,
            Habilitado = usuario.Habilitado,
            TipoUsuario = usuario.TipoUsuario,
            PersonaId = usuario.PersonaId,
            Direccion = usuario.Direccion,
            Telefono = usuario.Telefono,
            FechaNacimiento = usuario.FechaNacimiento,
            Legajo = usuario.Legajo,
            TipoPersona = usuario.TipoPersona,
            IdPlan = usuario.IdPlan
        };
        nombrePersona = usuario.Nombre ?? string.Empty;
        apellidoPersona = usuario.Apellido ?? string.Empty;
        errorMessage = string.Empty;
        showDialog = true;
    }

    private void OnTipoUsuarioChange(ChangeEventArgs e)
    {
        var nuevoTipo = e.Value?.ToString() ?? "Administrador";
        Console.WriteLine($"[DEBUG] Cambiando tipo de usuario de '{currentUsuario.TipoUsuario}' a '{nuevoTipo}'");
        currentUsuario.TipoUsuario = nuevoTipo;
        StateHasChanged();
    }

    private void CloseDialog()
    {
        showDialog = false;
        errorMessage = string.Empty;
    }

    private async Task HandleSave()
    {
        Console.WriteLine($"[DEBUG] HandleSave - TipoUsuario: '{currentUsuario.TipoUsuario}'");
        // Validaciones básicas
        if (string.IsNullOrWhiteSpace(currentUsuario.UsuarioNombre))
        {
            errorMessage = "El nombre de usuario es obligatorio";
            return;
        }

        if (string.IsNullOrWhiteSpace(currentUsuario.Email))
        {
            errorMessage = "El email es obligatorio";
            return;
        }

        if (!isEditMode && string.IsNullOrWhiteSpace(currentUsuario.Contrasenia))
        {
            errorMessage = "La contraseña es obligatoria";
            return;
        }

        // Validaciones para Profesor/Alumno
        if (currentUsuario.TipoUsuario != "Administrador")
        {
            Console.WriteLine($"[DEBUG] Validando datos persona - Nombre: '{nombrePersona}', Apellido: '{apellidoPersona}'");
            
            if (string.IsNullOrWhiteSpace(nombrePersona) || string.IsNullOrWhiteSpace(apellidoPersona))
            {
                errorMessage = "El nombre y apellido son obligatorios para Profesores y Alumnos";
                return;
            }

            if (string.IsNullOrWhiteSpace(currentUsuario.Direccion))
            {
                errorMessage = "La dirección es obligatoria para Profesores y Alumnos";
                return;
            }

            if (!currentUsuario.FechaNacimiento.HasValue)
            {
                errorMessage = "La fecha de nacimiento es obligatoria";
                return;
            }
        }

        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            // Preparar el DTO para enviar al backend
            // El backend creará/actualizará la Persona si es necesario
            var usuarioToSave = new UsuarioDto
            {
                Id = currentUsuario.Id,
                UsuarioNombre = currentUsuario.UsuarioNombre,
                Email = currentUsuario.Email,
                Contrasenia = currentUsuario.Contrasenia,
                Habilitado = currentUsuario.Habilitado,
                TipoUsuario = currentUsuario.TipoUsuario,
                PersonaId = currentUsuario.PersonaId,
                Direccion = currentUsuario.Direccion,
                Telefono = currentUsuario.Telefono,
                FechaNacimiento = currentUsuario.FechaNacimiento,
                TipoPersona = currentUsuario.TipoPersona,
                IdPlan = currentUsuario.IdPlan
            };

            // Para el backend creamos un PersonaDto con los datos
            if (currentUsuario.TipoUsuario != "Administrador")
            {
                Console.WriteLine($"[DEBUG] Creando objeto persona para tipo: '{currentUsuario.TipoUsuario}'");
                
                var tipoPersona = currentUsuario.TipoUsuario == "Profesor" ? TipoPersonaDto.Profesor : TipoPersonaDto.Alumno;
                Console.WriteLine($"[DEBUG] TipoPersona asignado: {tipoPersona}");
                
                usuarioToSave.persona = new PersonaDto
                {
                    Id = currentUsuario.PersonaId.GetValueOrDefault(),
                    Nombre = nombrePersona,
                    Apellido = apellidoPersona,
                    Email = currentUsuario.Email,
                    Direccion = currentUsuario.Direccion ?? string.Empty,
                    Telefono = currentUsuario.Telefono,
                    FechaNacimiento = currentUsuario.FechaNacimiento ?? DateTime.Now.AddYears(-18),
                    Legajo = currentUsuario.Legajo ?? 0,
                    TipoPersona = tipoPersona,
                    IdPlan = currentUsuario.IdPlan
                };
                
                Console.WriteLine($"[DEBUG] Objeto persona creado: {usuarioToSave.persona.Nombre} {usuarioToSave.persona.Apellido}, Tipo: {usuarioToSave.persona.TipoPersona}");
            }
            else
            {
                Console.WriteLine($"[DEBUG] Usuario tipo Administrador - NO se crea objeto persona");
            }

            bool success;
            if (isEditMode)
            {
                success = await UsuarioService.UpdateAsync(usuarioToSave);
            }
            else
            {
                success = await UsuarioService.CreateAsync(usuarioToSave);
            }

            if (success)
            {
                await LoadData();
                CloseDialog();
            }
            else
            {
                errorMessage = "Error al guardar el usuario";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void DeleteUsuario(UsuarioDto usuario)
    {
        usuarioToDelete = usuario;
        showConfirmDialog = true;
    }

    private void CloseConfirmDialog()
    {
        showConfirmDialog = false;
        usuarioToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (usuarioToDelete == null) return;

        isDeleting = true;
        try
        {
            var success = await UsuarioService.DeleteAsync(usuarioToDelete.Id);
            if (success)
            {
                await LoadData();
                CloseConfirmDialog();
            }
            else
            {
                errorMessage = "Error al eliminar el usuario";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error al eliminar: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
        }
    }

    private string GetTipoBadgeClass(string tipo)
    {
        return tipo.ToLower() switch
        {
            "administrador" => "admin",
            "profesor" => "profesor",
            "alumno" => "alumno",
            _ => "admin"
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private void ValidarTelefono(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var resultado = new System.Text.StringBuilder();
        
        foreach (var c in input)
        {
            if (char.IsDigit(c) || c == '+' || c == '-' || c == ' ')
            {
                resultado.Append(c);
            }
        }
        
        currentUsuario.Telefono = resultado.ToString();
    }
}