@page "/profesor/cargar-notas"
@using AcademiaBlazor.Services
@using DTOs
@inject DocenteCursoService DocenteCursoService
@inject InscripcionService InscripcionService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Cargar Notas - Profesor</PageTitle>

<div class="page-container">
    <div class="page-header">
        <div class="header-content">
            <button class="btn-back" @onclick="GoBack">
                Volver al Dashboard
            </button>
            <h1>Cargar Notas y Condiciones</h1>
        </div>
    </div>

    <div class="page-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else
        {
            <div class="curso-selector">
                <h2>Seleccione un Curso</h2>
                @if (!misCursos.Any())
                {
                    <div class="alert alert-warning">
                        No tienes cursos asignados. Un administrador debe asignarte cursos.
                    </div>
                }
                else
                {
                    <div class="cursos-grid">
                        @foreach (var curso in misCursos)
                        {
                            <div class="curso-card @(cursoSeleccionado?.IdCurso == curso.IdCurso ? "selected" : "")" 
                                 @onclick="() => SeleccionarCurso(curso)">
                                <div class="curso-header">
                                    <strong>@curso.NombreMateria</strong>
                                    <span class="badge @GetCargoBadgeClass(curso.Cargo)">@curso.CargoDescripcion</span>
                                </div>
                                <p>@curso.DescComision - Ao @curso.AnioCalendario</p>
                            </div>
                        }
                    </div>
                }
            </div>

            @if (cursoSeleccionado != null)
            {
                <div class="alumnos-section">
                    <h2>Alumnos Inscriptos</h2>
                    <p class="subtitle">Curso: <strong>@cursoSeleccionado.NombreMateria</strong> - @cursoSeleccionado.DescComision</p>

                    @if (isLoadingAlumnos)
                    {
                        <div class="loading-container">
                            <div class="spinner"></div>
                            <p>Cargando alumnos...</p>
                        </div>
                    }
                    else if (!alumnos.Any())
                    {
                        <div class="alert alert-info">
                            No hay alumnos inscriptos en este curso.
                        </div>
                    }
                    else
                    {
                        <div class="table-container">
                            <table class="data-table">
                                <thead>
                                    <tr>
                                        <th>Legajo</th>
                                        <th>Apellido y Nombre</th>
                                        <th>Condicion</th>
                                        <th>Nota</th>
                                        <th class="actions-column">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var alumno in alumnos)
                                    {
                                        <tr>
                                            <td><strong>@alumno.LegajoAlumno</strong></td>
                                            <td>@alumno.ApellidoAlumno, @alumno.NombreAlumno</td>
                                            <td><span class="badge @GetCondicionBadgeClass(alumno.Condicion)">@alumno.Condicion</span></td>
                                            <td>@(alumno.Condicion == CondicionAlumnoDto.Promocional && alumno.Nota.HasValue ? alumno.Nota.ToString() : "-")</td>
                                            <td class="actions-column">
                                                <button class="btn-action btn-edit" @onclick="() => OpenEditDialog(alumno)" title="Editar">
                                                    Editar
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@if (showEditDialog && alumnoSeleccionado != null)
{
    <div class="modal-overlay" @onclick="CloseEditDialog">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h2>Editar Condicion y Nota</h2>
                <button class="btn-close" @onclick="CloseEditDialog">Ã—</button>
            </div>
            
            <div class="modal-body">
                <div class="alumno-info">
                    <p><strong>Alumno:</strong> @alumnoSeleccionado.ApellidoAlumno, @alumnoSeleccionado.NombreAlumno</p>
                    <p><strong>Legajo:</strong> @alumnoSeleccionado.LegajoAlumno</p>
                    <p><strong>Curso:</strong> @cursoSeleccionado?.NombreMateria</p>
                </div>

                <EditForm Model="@alumnoSeleccionado" OnValidSubmit="HandleSave">
                    <div class="form-group">
                        <label for="condicion">Condicion *</label>
                        <InputSelect id="condicion" class="form-control" @bind-Value="nuevaCondicion">
                            <option value="Libre">Libre</option>
                            <option value="Regular">Regular</option>
                            <option value="Promocional">Promocional</option>
                        </InputSelect>
                    </div>

                    @if (nuevaCondicion == "Promocional")
                    {
                        <div class="form-group">
                            <label for="nota">Nota *</label>
                            <InputNumber id="nota" class="form-control" @bind-Value="nuevaNota" placeholder="Ingrese la nota (7-10)" />
                            <small class="form-text">Solo se pueden cargar notas para condicion Promocional</small>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" @onclick="CloseEditDialog">
                            Cancelar
                        </button>
                        <button type="submit" class="btn-primary" disabled="@isSaving">
                            @(isSaving ? "Guardando..." : "Guardar")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<style>
    .page-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }

    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px 0;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .header-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 40px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .page-header h1 {
        margin: 0;
        font-size: 32px;
        font-weight: bold;
        flex: 1;
        text-align: center;
    }

    .btn-back {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 2px solid white;
        padding: 10px 20px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-back:hover {
        background: white;
        color: #667eea;
        transform: translateX(-5px);
    }

    .page-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 40px;
    }

    .loading-container {
        text-align: center;
        padding: 60px 20px;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .curso-selector {
        background: white;
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    .curso-selector h2 {
        margin: 0 0 20px 0;
        color: #495057;
        font-size: 24px;
    }

    .cursos-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 15px;
    }

    .curso-card {
        padding: 20px;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s;
        background: #f8f9fa;
    }

    .curso-card:hover {
        border-color: #667eea;
        background: #f0f0ff;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
    }

    .curso-card.selected {
        border-color: #667eea;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .curso-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .curso-card p {
        margin: 0;
        font-size: 14px;
    }

    .curso-card.selected .badge {
        background: white;
        color: #667eea;
    }

    .alumnos-section {
        background: white;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    .alumnos-section h2 {
        margin: 0 0 10px 0;
        color: #495057;
        font-size: 24px;
    }

    .subtitle {
        color: #6c757d;
        margin-bottom: 20px;
    }

    .table-container {
        overflow-x: auto;
        margin-top: 20px;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        min-width: 700px;
    }

    .data-table thead {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .data-table th {
        padding: 15px;
        text-align: left;
        font-weight: 600;
        font-size: 14px;
        text-transform: uppercase;
    }

    .data-table td {
        padding: 12px 15px;
        border-bottom: 1px solid #e9ecef;
        font-size: 14px;
    }

    .data-table tbody tr {
        transition: all 0.3s;
    }

    .data-table tbody tr:hover {
        background: #f8f9fa;
    }

    .actions-column {
        text-align: center;
        width: 100px;
    }

    .btn-action {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        padding: 8px;
        margin: 0 5px;
        border-radius: 8px;
        transition: all 0.3s;
    }

    .btn-edit:hover {
        background: #e7f1ff;
        transform: scale(1.2);
    }

    .badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        display: inline-block;
    }

    .badge-jefe {
        background: #3498db;
        color: white;
    }

    .badge-titular {
        background: #2ecc71;
        color: white;
    }

    .badge-auxiliar {
        background: #f1c40f;
        color: #333;
    }

    .badge-libre {
        background: #e74c3c;
        color: white;
    }

    .badge-regular {
        background: #3498db;
        color: white;
    }

    .badge-promocional {
        background: #2ecc71;
        color: white;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 10px;
        margin: 20px 0;
    }

    .alert-warning {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }

    .alert-info {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        animation: fadeIn 0.3s;
    }

    .modal-content {
        background: white;
        border-radius: 15px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        animation: slideUp 0.3s;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(50px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .modal-header {
        padding: 25px 30px;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        font-size: 24px;
        color: #495057;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 28px;
        color: #6c757d;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.3s;
    }

    .btn-close:hover {
        background: #f8f9fa;
        color: #495057;
    }

    .modal-body {
        padding: 30px;
    }

    .alumno-info {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .alumno-info p {
        margin: 5px 0;
        color: #495057;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        color: #495057;
        font-weight: 600;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        font-size: 14px;
        transition: all 0.3s;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-text {
        color: #6c757d;
        font-size: 12px;
        margin-top: 5px;
        display: block;
    }

    .modal-actions {
        display: flex;
        gap: 15px;
        justify-content: flex-end;
        margin-top: 25px;
    }

    .btn-primary {
        background: #667eea;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-primary:hover:not(:disabled) {
        background: #5568d3;
        transform: translateY(-2px);
    }

    .btn-primary:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 10px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-secondary:hover {
        background: #5a6268;
        transform: translateY(-2px);
    }

    .icon {
        font-style: normal;
    }

    @@media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 15px;
        }

        .page-header h1 {
            font-size: 24px;
        }

        .page-content {
            padding: 20px;
        }

        .cursos-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private List<DocenteCursoDto> misCursos = new();
    private List<AlumnoCursoDto> alumnos = new();
    private DocenteCursoDto? cursoSeleccionado;
    private AlumnoCursoDto? alumnoSeleccionado;
    
    private bool isLoading = true;
    private bool isLoadingAlumnos = false;
    private bool showEditDialog = false;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private int? personaId;

    private string nuevaCondicion = "Regular";
    private int? nuevaNota;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var user = await AuthService.GetCurrentUserAsync();
        if (user?.TipoUsuario != "Profesor")
        {
            Navigation.NavigateTo("/dashboard");
            return;
        }

        personaId = user.PersonaId;
        await LoadMisCursos();
    }

    private async Task LoadMisCursos()
    {
        isLoading = true;
        try
        {
            if (personaId.HasValue)
            {
                var result = await DocenteCursoService.GetByDocenteAsync(personaId.Value);
                misCursos = result.ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar cursos: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SeleccionarCurso(DocenteCursoDto curso)
    {
        cursoSeleccionado = curso;
        isLoadingAlumnos = true;
        alumnos.Clear();

        try
        {
            var result = await InscripcionService.GetByCursoAsync(curso.IdCurso);
            alumnos = result.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar alumnos: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoadingAlumnos = false;
        }
    }

    private void OpenEditDialog(AlumnoCursoDto alumno)
    {
        alumnoSeleccionado = alumno;
        nuevaCondicion = alumno.Condicion.ToString();
        nuevaNota = alumno.Condicion == CondicionAlumnoDto.Promocional ? alumno.Nota : null;
        errorMessage = string.Empty;
        showEditDialog = true;
    }

    private void CloseEditDialog()
    {
        showEditDialog = false;
        errorMessage = string.Empty;
    }

    private async Task HandleSave()
    {
        if (alumnoSeleccionado == null) return;

        if (nuevaCondicion == "Promocional")
        {
            if (!nuevaNota.HasValue)
            {
                errorMessage = "La nota es obligatoria para condicion Promocional";
                return;
            }
            if (nuevaNota < 7 || nuevaNota > 10)
            {
                errorMessage = "La nota para Promocional debe estar entre 7 y 10";
                return;
            }
        }
        else
        {
            nuevaNota = null;
        }

        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            if (!Enum.TryParse<CondicionAlumnoDto>(nuevaCondicion, out var condicionEnum))
            {
                errorMessage = "Condicion invalida";
                return;
            }

            var success = await InscripcionService.ActualizarCondicionAsync(
                alumnoSeleccionado.IdInscripcion, 
                condicionEnum, 
                nuevaNota);

            if (success)
            {
                if (cursoSeleccionado != null)
                {
                    await SeleccionarCurso(cursoSeleccionado);
                }
                CloseEditDialog();
            }
            else
            {
                errorMessage = "Error al actualizar la condicion";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private string GetCargoBadgeClass(TipoCargoDto cargo)
    {
        return cargo switch
        {
            TipoCargoDto.JefeDeCatedra => "badge-jefe",
            TipoCargoDto.Titular => "badge-titular",
            TipoCargoDto.Auxiliar => "badge-auxiliar",
            _ => ""
        };
    }

    private string GetCondicionBadgeClass(CondicionAlumnoDto condicion)
    {
        return condicion switch
        {
            CondicionAlumnoDto.Libre => "badge-libre",
            CondicionAlumnoDto.Regular => "badge-regular",
            CondicionAlumnoDto.Promocional => "badge-promocional",
            _ => ""
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/profesor/dashboard");
    }
}